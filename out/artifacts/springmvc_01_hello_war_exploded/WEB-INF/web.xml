<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--
        SpringMVC思想是有一个前端控制器能拦截所有请求，并智能派发；
        这个前端控制器是一个servlet，应该在web.xml中配置这个servlet来拦截请求

    -->

    <!--
        前置控制器
        <load-on-startup>：servlet启动加载，
        servlet原本是第一次访问创建对象，有了这个标签后就会在服务器启动时候创建对象
        值越小 优先级越高 越先创建对象
    -->
    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <!--contextConfigLocation：指定SpringMVC配置文件位置
                classpath:路径下的文件地址
            -->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <!--处理所有请求的
            写/ 不是 /*，
            /*范围更大，会连接到*.jsp这些请求；一旦拦截，jsp页面不能显示
            /也会拦截所有请求，但不会拦截jsp，jsp访问请求正常。
        -->
        <servlet-name>springDispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <filter>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>